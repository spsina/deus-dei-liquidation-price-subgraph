// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddCollateral extends ethereum.Event {
  get params(): AddCollateral__Params {
    return new AddCollateral__Params(this);
  }
}

export class AddCollateral__Params {
  _event: AddCollateral;

  constructor(event: AddCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Borrow extends ethereum.Event {
  get params(): Borrow__Params {
    return new Borrow__Params(this);
  }
}

export class Borrow__Params {
  _event: Borrow;

  constructor(event: Borrow) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get debt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Liquidate extends ethereum.Event {
  get params(): Liquidate__Params {
    return new Liquidate__Params(this);
  }
}

export class Liquidate__Params {
  _event: Liquidate;

  constructor(event: Liquidate) {
    this._event = event;
  }

  get liquidator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get deiAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveCollateral extends ethereum.Event {
  get params(): RemoveCollateral__Params {
    return new RemoveCollateral__Params(this);
  }
}

export class RemoveCollateral__Params {
  _event: RemoveCollateral;

  constructor(event: RemoveCollateral) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Repay extends ethereum.Event {
  get params(): Repay__Params {
    return new Repay__Params(this);
  }
}

export class Repay__Params {
  _event: Repay;

  constructor(event: Repay) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get repayAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateAccrue extends ethereum.Event {
  get params(): UpdateAccrue__Params {
    return new UpdateAccrue__Params(this);
  }
}

export class UpdateAccrue__Params {
  _event: UpdateAccrue;

  constructor(event: UpdateAccrue) {
    this._event = event;
  }

  get interest(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DeiLenderSolidex__accrueInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class DeiLenderSolidex__borrowInputSigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class DeiLenderSolidex__totalBorrowResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class DeiLenderSolidex extends ethereum.SmartContract {
  static bind(address: Address): DeiLenderSolidex {
    return new DeiLenderSolidex("DeiLenderSolidex", address);
  }

  BORROW_OPENING_FEE(): BigInt {
    let result = super.call(
      "BORROW_OPENING_FEE",
      "BORROW_OPENING_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_BORROW_OPENING_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BORROW_OPENING_FEE",
      "BORROW_OPENING_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  LIQUIDATION_RATIO(): BigInt {
    let result = super.call(
      "LIQUIDATION_RATIO",
      "LIQUIDATION_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LIQUIDATION_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LIQUIDATION_RATIO",
      "LIQUIDATION_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accrueInfo(): DeiLenderSolidex__accrueInfoResult {
    let result = super.call(
      "accrueInfo",
      "accrueInfo():(uint256,uint256,uint256)",
      []
    );

    return new DeiLenderSolidex__accrueInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_accrueInfo(): ethereum.CallResult<DeiLenderSolidex__accrueInfoResult> {
    let result = super.tryCall(
      "accrueInfo",
      "accrueInfo():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DeiLenderSolidex__accrueInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  borrow(
    to: Address,
    amount: BigInt,
    price: BigInt,
    timestamp: BigInt,
    reqId: Bytes,
    sigs: Array<DeiLenderSolidex__borrowInputSigsStruct>
  ): BigInt {
    let result = super.call(
      "borrow",
      "borrow(address,uint256,uint256,uint256,bytes,(uint256,address,address)[]):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(reqId),
        ethereum.Value.fromTupleArray(sigs)
      ]
    );

    return result[0].toBigInt();
  }

  try_borrow(
    to: Address,
    amount: BigInt,
    price: BigInt,
    timestamp: BigInt,
    reqId: Bytes,
    sigs: Array<DeiLenderSolidex__borrowInputSigsStruct>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrow",
      "borrow(address,uint256,uint256,uint256,bytes,(uint256,address,address)[]):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(price),
        ethereum.Value.fromUnsignedBigInt(timestamp),
        ethereum.Value.fromBytes(reqId),
        ethereum.Value.fromTupleArray(sigs)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateral(): Address {
    let result = super.call("collateral", "collateral():(address)", []);

    return result[0].toAddress();
  }

  try_collateral(): ethereum.CallResult<Address> {
    let result = super.tryCall("collateral", "collateral():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDebt(user: Address): BigInt {
    let result = super.call("getDebt", "getDebt(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getDebt(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDebt", "getDebt(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidationPrice(user: Address): BigInt {
    let result = super.call(
      "getLiquidationPrice",
      "getLiquidationPrice(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getLiquidationPrice(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLiquidationPrice",
      "getLiquidationPrice(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRepayAmount(amount: BigInt): BigInt {
    let result = super.call(
      "getRepayAmount",
      "getRepayAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_getRepayAmount(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRepayAmount",
      "getRepayAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawableCollateralAmount(user: Address): BigInt {
    let result = super.call(
      "getWithdrawableCollateralAmount",
      "getWithdrawableCollateralAmount(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawableCollateralAmount(
    user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawableCollateralAmount",
      "getWithdrawableCollateralAmount(address):(uint256)",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isSolvent(user: Address): boolean {
    let result = super.call("isSolvent", "isSolvent(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBoolean();
  }

  try_isSolvent(user: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSolvent", "isSolvent(address):(bool)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lpDepositor(): Address {
    let result = super.call("lpDepositor", "lpDepositor():(address)", []);

    return result[0].toAddress();
  }

  try_lpDepositor(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpDepositor", "lpDepositor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxCap(): BigInt {
    let result = super.call("maxCap", "maxCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxCap", "maxCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintHelper(): Address {
    let result = super.call("mintHelper", "mintHelper():(address)", []);

    return result[0].toAddress();
  }

  try_mintHelper(): ethereum.CallResult<Address> {
    let result = super.tryCall("mintHelper", "mintHelper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  repayBase(to: Address, amount: BigInt): BigInt {
    let result = super.call(
      "repayBase",
      "repayBase(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayBase(to: Address, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayBase",
      "repayBase(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayElastic(to: Address, debt: BigInt): BigInt {
    let result = super.call(
      "repayElastic",
      "repayElastic(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(to), ethereum.Value.fromUnsignedBigInt(debt)]
    );

    return result[0].toBigInt();
  }

  try_repayElastic(to: Address, debt: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayElastic",
      "repayElastic(address,uint256):(uint256)",
      [ethereum.Value.fromAddress(to), ethereum.Value.fromUnsignedBigInt(debt)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  solid(): Address {
    let result = super.call("solid", "solid():(address)", []);

    return result[0].toAddress();
  }

  try_solid(): ethereum.CallResult<Address> {
    let result = super.tryCall("solid", "solid():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  solidex(): Address {
    let result = super.call("solidex", "solidex():(address)", []);

    return result[0].toAddress();
  }

  try_solidex(): ethereum.CallResult<Address> {
    let result = super.tryCall("solidex", "solidex():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalBorrow(): DeiLenderSolidex__totalBorrowResult {
    let result = super.call(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );

    return new DeiLenderSolidex__totalBorrowResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalBorrow(): ethereum.CallResult<DeiLenderSolidex__totalBorrowResult> {
    let result = super.tryCall(
      "totalBorrow",
      "totalBorrow():(uint128,uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DeiLenderSolidex__totalBorrowResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  totalCollateral(): BigInt {
    let result = super.call(
      "totalCollateral",
      "totalCollateral():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalCollateral(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalCollateral",
      "totalCollateral():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userBorrow(param0: Address): BigInt {
    let result = super.call("userBorrow", "userBorrow(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userBorrow(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userBorrow", "userBorrow(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userCollateral(param0: Address): BigInt {
    let result = super.call(
      "userCollateral",
      "userCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userCollateral(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userCollateral",
      "userCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userHolder(param0: Address): Address {
    let result = super.call("userHolder", "userHolder(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_userHolder(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("userHolder", "userHolder(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get collateral_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get solid_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get solidex_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get lpDepositor_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get maxCap_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get interestPerSecond_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get borrowOpeningFee(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get liquidationRatio(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get mintHelper_(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AccrueCall extends ethereum.Call {
  get inputs(): AccrueCall__Inputs {
    return new AccrueCall__Inputs(this);
  }

  get outputs(): AccrueCall__Outputs {
    return new AccrueCall__Outputs(this);
  }
}

export class AccrueCall__Inputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AccrueCall__Outputs {
  _call: AccrueCall;

  constructor(call: AccrueCall) {
    this._call = call;
  }
}

export class AddCollateralCall extends ethereum.Call {
  get inputs(): AddCollateralCall__Inputs {
    return new AddCollateralCall__Inputs(this);
  }

  get outputs(): AddCollateralCall__Outputs {
    return new AddCollateralCall__Outputs(this);
  }
}

export class AddCollateralCall__Inputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddCollateralCall__Outputs {
  _call: AddCollateralCall;

  constructor(call: AddCollateralCall) {
    this._call = call;
  }
}

export class BorrowCall extends ethereum.Call {
  get inputs(): BorrowCall__Inputs {
    return new BorrowCall__Inputs(this);
  }

  get outputs(): BorrowCall__Outputs {
    return new BorrowCall__Outputs(this);
  }
}

export class BorrowCall__Inputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get reqId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get sigs(): Array<BorrowCallSigsStruct> {
    return this._call.inputValues[5].value.toTupleArray<BorrowCallSigsStruct>();
  }
}

export class BorrowCall__Outputs {
  _call: BorrowCall;

  constructor(call: BorrowCall) {
    this._call = call;
  }

  get debt(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowCallSigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get pools(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimAndWithdrawCall extends ethereum.Call {
  get inputs(): ClaimAndWithdrawCall__Inputs {
    return new ClaimAndWithdrawCall__Inputs(this);
  }

  get outputs(): ClaimAndWithdrawCall__Outputs {
    return new ClaimAndWithdrawCall__Outputs(this);
  }
}

export class ClaimAndWithdrawCall__Inputs {
  _call: ClaimAndWithdrawCall;

  constructor(call: ClaimAndWithdrawCall) {
    this._call = call;
  }

  get pools(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimAndWithdrawCall__Outputs {
  _call: ClaimAndWithdrawCall;

  constructor(call: ClaimAndWithdrawCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class EmergencyHolderWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyHolderWithdrawCall__Inputs {
    return new EmergencyHolderWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyHolderWithdrawCall__Outputs {
    return new EmergencyHolderWithdrawCall__Outputs(this);
  }
}

export class EmergencyHolderWithdrawCall__Inputs {
  _call: EmergencyHolderWithdrawCall;

  constructor(call: EmergencyHolderWithdrawCall) {
    this._call = call;
  }

  get holder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class EmergencyHolderWithdrawCall__Outputs {
  _call: EmergencyHolderWithdrawCall;

  constructor(call: EmergencyHolderWithdrawCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get reqId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get sigs(): Array<LiquidateCallSigsStruct> {
    return this._call.inputValues[5].value.toTupleArray<
      LiquidateCallSigsStruct
    >();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class LiquidateCallSigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class RemoveCollateralCall extends ethereum.Call {
  get inputs(): RemoveCollateralCall__Inputs {
    return new RemoveCollateralCall__Inputs(this);
  }

  get outputs(): RemoveCollateralCall__Outputs {
    return new RemoveCollateralCall__Outputs(this);
  }
}

export class RemoveCollateralCall__Inputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get reqId(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get sigs(): Array<RemoveCollateralCallSigsStruct> {
    return this._call.inputValues[5].value.toTupleArray<
      RemoveCollateralCallSigsStruct
    >();
  }
}

export class RemoveCollateralCall__Outputs {
  _call: RemoveCollateralCall;

  constructor(call: RemoveCollateralCall) {
    this._call = call;
  }
}

export class RemoveCollateralCallSigsStruct extends ethereum.Tuple {
  get signature(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get nonce(): Address {
    return this[2].toAddress();
  }
}

export class RepayBaseCall extends ethereum.Call {
  get inputs(): RepayBaseCall__Inputs {
    return new RepayBaseCall__Inputs(this);
  }

  get outputs(): RepayBaseCall__Outputs {
    return new RepayBaseCall__Outputs(this);
  }
}

export class RepayBaseCall__Inputs {
  _call: RepayBaseCall;

  constructor(call: RepayBaseCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayBaseCall__Outputs {
  _call: RepayBaseCall;

  constructor(call: RepayBaseCall) {
    this._call = call;
  }

  get repayAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayElasticCall extends ethereum.Call {
  get inputs(): RepayElasticCall__Inputs {
    return new RepayElasticCall__Inputs(this);
  }

  get outputs(): RepayElasticCall__Outputs {
    return new RepayElasticCall__Outputs(this);
  }
}

export class RepayElasticCall__Inputs {
  _call: RepayElasticCall;

  constructor(call: RepayElasticCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get debt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RepayElasticCall__Outputs {
  _call: RepayElasticCall;

  constructor(call: RepayElasticCall) {
    this._call = call;
  }

  get repayAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetBorrowOpeningFeeCall extends ethereum.Call {
  get inputs(): SetBorrowOpeningFeeCall__Inputs {
    return new SetBorrowOpeningFeeCall__Inputs(this);
  }

  get outputs(): SetBorrowOpeningFeeCall__Outputs {
    return new SetBorrowOpeningFeeCall__Outputs(this);
  }
}

export class SetBorrowOpeningFeeCall__Inputs {
  _call: SetBorrowOpeningFeeCall;

  constructor(call: SetBorrowOpeningFeeCall) {
    this._call = call;
  }

  get borrowOpeningFee_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBorrowOpeningFeeCall__Outputs {
  _call: SetBorrowOpeningFeeCall;

  constructor(call: SetBorrowOpeningFeeCall) {
    this._call = call;
  }
}

export class SetLiquidationRatioCall extends ethereum.Call {
  get inputs(): SetLiquidationRatioCall__Inputs {
    return new SetLiquidationRatioCall__Inputs(this);
  }

  get outputs(): SetLiquidationRatioCall__Outputs {
    return new SetLiquidationRatioCall__Outputs(this);
  }
}

export class SetLiquidationRatioCall__Inputs {
  _call: SetLiquidationRatioCall;

  constructor(call: SetLiquidationRatioCall) {
    this._call = call;
  }

  get liquidationRatio_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidationRatioCall__Outputs {
  _call: SetLiquidationRatioCall;

  constructor(call: SetLiquidationRatioCall) {
    this._call = call;
  }
}

export class SetMaxCapCall extends ethereum.Call {
  get inputs(): SetMaxCapCall__Inputs {
    return new SetMaxCapCall__Inputs(this);
  }

  get outputs(): SetMaxCapCall__Outputs {
    return new SetMaxCapCall__Outputs(this);
  }
}

export class SetMaxCapCall__Inputs {
  _call: SetMaxCapCall;

  constructor(call: SetMaxCapCall) {
    this._call = call;
  }

  get maxCap_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxCapCall__Outputs {
  _call: SetMaxCapCall;

  constructor(call: SetMaxCapCall) {
    this._call = call;
  }
}

export class SetMintHelperCall extends ethereum.Call {
  get inputs(): SetMintHelperCall__Inputs {
    return new SetMintHelperCall__Inputs(this);
  }

  get outputs(): SetMintHelperCall__Outputs {
    return new SetMintHelperCall__Outputs(this);
  }
}

export class SetMintHelperCall__Inputs {
  _call: SetMintHelperCall;

  constructor(call: SetMintHelperCall) {
    this._call = call;
  }

  get mintHelper_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMintHelperCall__Outputs {
  _call: SetMintHelperCall;

  constructor(call: SetMintHelperCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get oracle_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetUsersBorrowsAndCollateralsCall extends ethereum.Call {
  get inputs(): SetUsersBorrowsAndCollateralsCall__Inputs {
    return new SetUsersBorrowsAndCollateralsCall__Inputs(this);
  }

  get outputs(): SetUsersBorrowsAndCollateralsCall__Outputs {
    return new SetUsersBorrowsAndCollateralsCall__Outputs(this);
  }
}

export class SetUsersBorrowsAndCollateralsCall__Inputs {
  _call: SetUsersBorrowsAndCollateralsCall;

  constructor(call: SetUsersBorrowsAndCollateralsCall) {
    this._call = call;
  }

  get users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get borrowAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get collateralAmounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SetUsersBorrowsAndCollateralsCall__Outputs {
  _call: SetUsersBorrowsAndCollateralsCall;

  constructor(call: SetUsersBorrowsAndCollateralsCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get direct(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get renounce(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
