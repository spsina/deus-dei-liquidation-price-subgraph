// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DeusPriceForLiquidation extends ethereum.SmartContract {
  static bind(address: Address): DeusPriceForLiquidation {
    return new DeusPriceForLiquidation("DeusPriceForLiquidation", address);
  }

  DEI(): Address {
    let result = super.call("DEI", "DEI():(address)", []);

    return result[0].toAddress();
  }

  try_DEI(): ethereum.CallResult<Address> {
    let result = super.tryCall("DEI", "DEI():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEUS(): Address {
    let result = super.call("DEUS", "DEUS():(address)", []);

    return result[0].toAddress();
  }

  try_DEUS(): ethereum.CallResult<Address> {
    let result = super.tryCall("DEUS", "DEUS():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deusPriceForLiquidation(
    lenderAddress: Address,
    user: Address,
    eps: BigInt
  ): BigInt {
    let result = super.call(
      "deusPriceForLiquidation",
      "deusPriceForLiquidation(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(lenderAddress),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(eps)
      ]
    );

    return result[0].toBigInt();
  }

  try_deusPriceForLiquidation(
    lenderAddress: Address,
    user: Address,
    eps: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deusPriceForLiquidation",
      "deusPriceForLiquidation(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(lenderAddress),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(eps)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAmountIn(amountOut: BigInt, eps: BigInt): BigInt {
    let result = super.call(
      "getAmountIn",
      "getAmountIn(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(eps)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAmountIn(amountOut: BigInt, eps: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAmountIn",
      "getAmountIn(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountOut),
        ethereum.Value.fromUnsignedBigInt(eps)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lpAddress(): Address {
    let result = super.call("lpAddress", "lpAddress():(address)", []);

    return result[0].toAddress();
  }

  try_lpAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("lpAddress", "lpAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  solidlyRouter(): Address {
    let result = super.call("solidlyRouter", "solidlyRouter():(address)", []);

    return result[0].toAddress();
  }

  try_solidlyRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "solidlyRouter",
      "solidlyRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
